/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * NoAuthority: 'NoAuthority'
 *
 * @category Errors
 * @category generated
 */
export class NoAuthorityError extends Error {
  readonly code: number = 0x0
  readonly name: string = 'NoAuthority'
  constructor() {
    super('NoAuthority')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NoAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(0x0, () => new NoAuthorityError())
createErrorFromNameLookup.set('NoAuthority', () => new NoAuthorityError())

/**
 * AccountNotWritable: 'AccountNotWritable'
 *
 * @category Errors
 * @category generated
 */
export class AccountNotWritableError extends Error {
  readonly code: number = 0x1
  readonly name: string = 'AccountNotWritable'
  constructor() {
    super('AccountNotWritable')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AccountNotWritableError)
    }
  }
}

createErrorFromCodeLookup.set(0x1, () => new AccountNotWritableError())
createErrorFromNameLookup.set(
  'AccountNotWritable',
  () => new AccountNotWritableError()
)

/**
 * AccountNotSigner: 'AccountNotSigner'
 *
 * @category Errors
 * @category generated
 */
export class AccountNotSignerError extends Error {
  readonly code: number = 0x2
  readonly name: string = 'AccountNotSigner'
  constructor() {
    super('AccountNotSigner')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AccountNotSignerError)
    }
  }
}

createErrorFromCodeLookup.set(0x2, () => new AccountNotSignerError())
createErrorFromNameLookup.set(
  'AccountNotSigner',
  () => new AccountNotSignerError()
)

/**
 * WrongPDA: 'WrongPDA'
 *
 * @category Errors
 * @category generated
 */
export class WrongPDAError extends Error {
  readonly code: number = 0x3
  readonly name: string = 'WrongPDA'
  constructor() {
    super('WrongPDA')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongPDAError)
    }
  }
}

createErrorFromCodeLookup.set(0x3, () => new WrongPDAError())
createErrorFromNameLookup.set('WrongPDA', () => new WrongPDAError())

/**
 * WrongPubkey: 'WrongPubkey'
 *
 * @category Errors
 * @category generated
 */
export class WrongPubkeyError extends Error {
  readonly code: number = 0x4
  readonly name: string = 'WrongPubkey'
  constructor() {
    super('WrongPubkey')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongPubkeyError)
    }
  }
}

createErrorFromCodeLookup.set(0x4, () => new WrongPubkeyError())
createErrorFromNameLookup.set('WrongPubkey', () => new WrongPubkeyError())

/**
 * WrongAccountOwner: 'WrongAccountOwner'
 *
 * @category Errors
 * @category generated
 */
export class WrongAccountOwnerError extends Error {
  readonly code: number = 0x5
  readonly name: string = 'WrongAccountOwner'
  constructor() {
    super('WrongAccountOwner')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongAccountOwnerError)
    }
  }
}

createErrorFromCodeLookup.set(0x5, () => new WrongAccountOwnerError())
createErrorFromNameLookup.set(
  'WrongAccountOwner',
  () => new WrongAccountOwnerError()
)

/**
 * VrfResultNotFullfilled: 'VrfResultNotFullfilled'
 *
 * @category Errors
 * @category generated
 */
export class VrfResultNotFullfilledError extends Error {
  readonly code: number = 0x6
  readonly name: string = 'VrfResultNotFullfilled'
  constructor() {
    super('VrfResultNotFullfilled')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, VrfResultNotFullfilledError)
    }
  }
}

createErrorFromCodeLookup.set(0x6, () => new VrfResultNotFullfilledError())
createErrorFromNameLookup.set(
  'VrfResultNotFullfilled',
  () => new VrfResultNotFullfilledError()
)

/**
 * VrfResultAlreadyUsed: 'VrfResultAlreadyUsed'
 *
 * @category Errors
 * @category generated
 */
export class VrfResultAlreadyUsedError extends Error {
  readonly code: number = 0x7
  readonly name: string = 'VrfResultAlreadyUsed'
  constructor() {
    super('VrfResultAlreadyUsed')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, VrfResultAlreadyUsedError)
    }
  }
}

createErrorFromCodeLookup.set(0x7, () => new VrfResultAlreadyUsedError())
createErrorFromNameLookup.set(
  'VrfResultAlreadyUsed',
  () => new VrfResultAlreadyUsedError()
)

/**
 * UserAccountNotSettled: 'UserAccountNotSettled'
 *
 * @category Errors
 * @category generated
 */
export class UserAccountNotSettledError extends Error {
  readonly code: number = 0x8
  readonly name: string = 'UserAccountNotSettled'
  constructor() {
    super('UserAccountNotSettled')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UserAccountNotSettledError)
    }
  }
}

createErrorFromCodeLookup.set(0x8, () => new UserAccountNotSettledError())
createErrorFromNameLookup.set(
  'UserAccountNotSettled',
  () => new UserAccountNotSettledError()
)

/**
 * GameNotActive: 'GameNotActive'
 *
 * @category Errors
 * @category generated
 */
export class GameNotActiveError extends Error {
  readonly code: number = 0x9
  readonly name: string = 'GameNotActive'
  constructor() {
    super('GameNotActive')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, GameNotActiveError)
    }
  }
}

createErrorFromCodeLookup.set(0x9, () => new GameNotActiveError())
createErrorFromNameLookup.set('GameNotActive', () => new GameNotActiveError())

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
