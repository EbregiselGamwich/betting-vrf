/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category MintCreate
 * @category generated
 */
export const MintCreateStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number
}>([['instructionDiscriminator', beet.u8]], 'MintCreateInstructionArgs')
/**
 * Accounts required by the _MintCreate_ instruction
 *
 * @property [_writable_, **signer**] operator Operator Account
 * @property [_writable_] mintAccount Mint Account
 * @property [] statsPda Stats PDA Account
 * @category Instructions
 * @category MintCreate
 * @category generated
 */
export type MintCreateInstructionAccounts = {
  operator: web3.PublicKey
  mintAccount: web3.PublicKey
  statsPda: web3.PublicKey
  tokenProgram?: web3.PublicKey
  systemProgram?: web3.PublicKey
}

export const mintCreateInstructionDiscriminator = 1

/**
 * Creates a _MintCreate_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category MintCreate
 * @category generated
 */
export function createMintCreateInstruction(
  accounts: MintCreateInstructionAccounts,
  programId = new web3.PublicKey('HiEuiREGdSuBYv4oxtdkWnYtcnNUKk8m93XSn8pPYtcm')
) {
  const [data] = MintCreateStruct.serialize({
    instructionDiscriminator: mintCreateInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.operator,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.mintAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.statsPda,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
