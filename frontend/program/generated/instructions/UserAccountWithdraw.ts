/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  UserAccountWithdrawArgs,
  userAccountWithdrawArgsBeet,
} from '../types/UserAccountWithdrawArgs'

/**
 * @category Instructions
 * @category UserAccountWithdraw
 * @category generated
 */
export type UserAccountWithdrawInstructionArgs = {
  userAccountWithdrawArgs: UserAccountWithdrawArgs
}
/**
 * @category Instructions
 * @category UserAccountWithdraw
 * @category generated
 */
export const UserAccountWithdrawStruct = new beet.BeetArgsStruct<
  UserAccountWithdrawInstructionArgs & {
    instructionDiscriminator: number
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['userAccountWithdrawArgs', userAccountWithdrawArgsBeet],
  ],
  'UserAccountWithdrawInstructionArgs'
)
/**
 * Accounts required by the _UserAccountWithdraw_ instruction
 *
 * @property [_writable_, **signer**] userWalletAccount User Wallet Account
 * @property [_writable_] userAccount User Betting Account
 * @property [_writable_] statsPda Stats PDA Account
 * @property [_writable_] operator Operator Account
 * @property [_writable_] referallAccount (optional) Referral Wallet Account
 * @category Instructions
 * @category UserAccountWithdraw
 * @category generated
 */
export type UserAccountWithdrawInstructionAccounts = {
  userWalletAccount: web3.PublicKey
  userAccount: web3.PublicKey
  statsPda: web3.PublicKey
  operator: web3.PublicKey
  referallAccount?: web3.PublicKey
}

export const userAccountWithdrawInstructionDiscriminator = 3

/**
 * Creates a _UserAccountWithdraw_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category UserAccountWithdraw
 * @category generated
 */
export function createUserAccountWithdrawInstruction(
  accounts: UserAccountWithdrawInstructionAccounts,
  args: UserAccountWithdrawInstructionArgs,
  programId = new web3.PublicKey('9f2Yc9UYah7ARVMvJLVTqnJCnDv3ofSG1PSvJwikgEn4')
) {
  const [data] = UserAccountWithdrawStruct.serialize({
    instructionDiscriminator: userAccountWithdrawInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.userWalletAccount,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.userAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.statsPda,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.operator,
      isWritable: true,
      isSigner: false,
    },
  ]

  if (accounts.referallAccount != null) {
    keys.push({
      pubkey: accounts.referallAccount,
      isWritable: true,
      isSigner: false,
    })
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
