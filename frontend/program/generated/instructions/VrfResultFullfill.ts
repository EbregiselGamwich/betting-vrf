/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  VrfResultFullfillArgs,
  vrfResultFullfillArgsBeet,
} from '../types/VrfResultFullfillArgs'

/**
 * @category Instructions
 * @category VrfResultFullfill
 * @category generated
 */
export type VrfResultFullfillInstructionArgs = {
  vrfResultFullfillArgs: VrfResultFullfillArgs
}
/**
 * @category Instructions
 * @category VrfResultFullfill
 * @category generated
 */
export const VrfResultFullfillStruct = new beet.BeetArgsStruct<
  VrfResultFullfillInstructionArgs & {
    instructionDiscriminator: number
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['vrfResultFullfillArgs', vrfResultFullfillArgsBeet],
  ],
  'VrfResultFullfillInstructionArgs'
)
/**
 * Accounts required by the _VrfResultFullfill_ instruction
 *
 * @property [**signer**] operator Operator Account
 * @property [_writable_] vrfResultPda VRF result PDA account
 * @category Instructions
 * @category VrfResultFullfill
 * @category generated
 */
export type VrfResultFullfillInstructionAccounts = {
  operator: web3.PublicKey
  vrfResultPda: web3.PublicKey
}

export const vrfResultFullfillInstructionDiscriminator = 10

/**
 * Creates a _VrfResultFullfill_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category VrfResultFullfill
 * @category generated
 */
export function createVrfResultFullfillInstruction(
  accounts: VrfResultFullfillInstructionAccounts,
  args: VrfResultFullfillInstructionArgs,
  programId = new web3.PublicKey('9f2Yc9UYah7ARVMvJLVTqnJCnDv3ofSG1PSvJwikgEn4')
) {
  const [data] = VrfResultFullfillStruct.serialize({
    instructionDiscriminator: vrfResultFullfillInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.operator,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.vrfResultPda,
      isWritable: true,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
