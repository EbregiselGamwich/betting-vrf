/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category GameClose
 * @category generated
 */
export const GameCloseStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number
}>([['instructionDiscriminator', beet.u8]], 'GameCloseInstructionArgs')
/**
 * Accounts required by the _GameClose_ instruction
 *
 * @property [_writable_, **signer**] host The wallet account of the host
 * @property [_writable_] hostUserAccount User Betting Account of the host
 * @property [_writable_] statsPda Stats PDA Account
 * @property [_writable_] gamePda Game PDA Account
 * @category Instructions
 * @category GameClose
 * @category generated
 */
export type GameCloseInstructionAccounts = {
  host: web3.PublicKey
  hostUserAccount: web3.PublicKey
  statsPda: web3.PublicKey
  gamePda: web3.PublicKey
  systemProgram?: web3.PublicKey
}

export const gameCloseInstructionDiscriminator = 9

/**
 * Creates a _GameClose_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category GameClose
 * @category generated
 */
export function createGameCloseInstruction(
  accounts: GameCloseInstructionAccounts,
  programId = new web3.PublicKey('HiEuiREGdSuBYv4oxtdkWnYtcnNUKk8m93XSn8pPYtcm')
) {
  const [data] = GameCloseStruct.serialize({
    instructionDiscriminator: gameCloseInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.host,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.hostUserAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.statsPda,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.gamePda,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
