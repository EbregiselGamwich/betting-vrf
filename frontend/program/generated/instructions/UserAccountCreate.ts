/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  UserAccountCreateArgs,
  userAccountCreateArgsBeet,
} from '../types/UserAccountCreateArgs'

/**
 * @category Instructions
 * @category UserAccountCreate
 * @category generated
 */
export type UserAccountCreateInstructionArgs = {
  userAccountCreateArgs: UserAccountCreateArgs
}
/**
 * @category Instructions
 * @category UserAccountCreate
 * @category generated
 */
export const UserAccountCreateStruct = new beet.FixableBeetArgsStruct<
  UserAccountCreateInstructionArgs & {
    instructionDiscriminator: number
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['userAccountCreateArgs', userAccountCreateArgsBeet],
  ],
  'UserAccountCreateInstructionArgs'
)
/**
 * Accounts required by the _UserAccountCreate_ instruction
 *
 * @property [_writable_, **signer**] userWalletAccount User Wallet Account
 * @property [_writable_] userAccount User Betting Account
 * @property [_writable_] statsPda Stats PDA Account
 * @category Instructions
 * @category UserAccountCreate
 * @category generated
 */
export type UserAccountCreateInstructionAccounts = {
  userWalletAccount: web3.PublicKey
  userAccount: web3.PublicKey
  statsPda: web3.PublicKey
  systemProgram?: web3.PublicKey
}

export const userAccountCreateInstructionDiscriminator = 2

/**
 * Creates a _UserAccountCreate_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category UserAccountCreate
 * @category generated
 */
export function createUserAccountCreateInstruction(
  accounts: UserAccountCreateInstructionAccounts,
  args: UserAccountCreateInstructionArgs,
  programId = new web3.PublicKey('HiEuiREGdSuBYv4oxtdkWnYtcnNUKk8m93XSn8pPYtcm')
) {
  const [data] = UserAccountCreateStruct.serialize({
    instructionDiscriminator: userAccountCreateInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.userWalletAccount,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.userAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.statsPda,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
