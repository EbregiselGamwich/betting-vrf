/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  GamePlaceBetArgs,
  gamePlaceBetArgsBeet,
} from '../types/GamePlaceBetArgs'

/**
 * @category Instructions
 * @category GamePlaceBet
 * @category generated
 */
export type GamePlaceBetInstructionArgs = {
  gamePlaceBetArgs: GamePlaceBetArgs
}
/**
 * @category Instructions
 * @category GamePlaceBet
 * @category generated
 */
export const GamePlaceBetStruct = new beet.FixableBeetArgsStruct<
  GamePlaceBetInstructionArgs & {
    instructionDiscriminator: number
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['gamePlaceBetArgs', gamePlaceBetArgsBeet],
  ],
  'GamePlaceBetInstructionArgs'
)
/**
 * Accounts required by the _GamePlaceBet_ instruction
 *
 * @property [_writable_, **signer**] bettor Bettor wallet account
 * @property [_writable_] bettorUserAccount Bettor user account
 * @property [_writable_] statsPda Stats PDA Account
 * @property [_writable_] gamePda Game PDA Account
 * @property [_writable_] hostUserAccount Host user account
 * @property [_writable_] vrfResultPda VRF result PDA account
 * @property [] slotHashes Slot hashes account
 * @category Instructions
 * @category GamePlaceBet
 * @category generated
 */
export type GamePlaceBetInstructionAccounts = {
  bettor: web3.PublicKey
  bettorUserAccount: web3.PublicKey
  statsPda: web3.PublicKey
  gamePda: web3.PublicKey
  hostUserAccount: web3.PublicKey
  vrfResultPda: web3.PublicKey
  slotHashes: web3.PublicKey
  systemProgram?: web3.PublicKey
}

export const gamePlaceBetInstructionDiscriminator = 7

/**
 * Creates a _GamePlaceBet_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category GamePlaceBet
 * @category generated
 */
export function createGamePlaceBetInstruction(
  accounts: GamePlaceBetInstructionAccounts,
  args: GamePlaceBetInstructionArgs,
  programId = new web3.PublicKey('9f2Yc9UYah7ARVMvJLVTqnJCnDv3ofSG1PSvJwikgEn4')
) {
  const [data] = GamePlaceBetStruct.serialize({
    instructionDiscriminator: gamePlaceBetInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.bettor,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.bettorUserAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.statsPda,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.gamePda,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.hostUserAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.vrfResultPda,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.slotHashes,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
