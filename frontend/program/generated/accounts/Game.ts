/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import {
  StateAccountType,
  stateAccountTypeBeet,
} from '../types/StateAccountType'
import {
  CommonGameConfig,
  commonGameConfigBeet,
} from '../types/CommonGameConfig'
import { GameTypeConfig, gameTypeConfigBeet } from '../types/GameTypeConfig'

/**
 * Arguments used to create {@link Game}
 * @category Accounts
 * @category generated
 */
export type GameArgs = {
  accountType: StateAccountType
  host: web3.PublicKey
  isActive: boolean
  unresolvedVrfResult: number
  totalLamportsIn: beet.bignum
  totalLamportsOut: beet.bignum
  commonConfig: CommonGameConfig
  gameTypeConfig: GameTypeConfig
}
/**
 * Holds the data for the {@link Game} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Game implements GameArgs {
  private constructor(
    readonly accountType: StateAccountType,
    readonly host: web3.PublicKey,
    readonly isActive: boolean,
    readonly unresolvedVrfResult: number,
    readonly totalLamportsIn: beet.bignum,
    readonly totalLamportsOut: beet.bignum,
    readonly commonConfig: CommonGameConfig,
    readonly gameTypeConfig: GameTypeConfig
  ) {}

  /**
   * Creates a {@link Game} instance from the provided args.
   */
  static fromArgs(args: GameArgs) {
    return new Game(
      args.accountType,
      args.host,
      args.isActive,
      args.unresolvedVrfResult,
      args.totalLamportsIn,
      args.totalLamportsOut,
      args.commonConfig,
      args.gameTypeConfig
    )
  }

  /**
   * Deserializes the {@link Game} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [Game, number] {
    return Game.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Game} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey
  ): Promise<Game> {
    const accountInfo = await connection.getAccountInfo(address)
    if (accountInfo == null) {
      throw new Error(`Unable to find Game account at ${address}`)
    }
    return Game.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'HiEuiREGdSuBYv4oxtdkWnYtcnNUKk8m93XSn8pPYtcm'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, gameBeet)
  }

  /**
   * Deserializes the {@link Game} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Game, number] {
    return gameBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link Game} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return gameBeet.serialize(this)
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Game} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: GameArgs) {
    const instance = Game.fromArgs(args)
    return gameBeet.toFixedFromValue(instance).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Game} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: GameArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      Game.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link Game} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      accountType: 'StateAccountType.' + StateAccountType[this.accountType],
      host: this.host.toBase58(),
      isActive: this.isActive,
      unresolvedVrfResult: this.unresolvedVrfResult,
      totalLamportsIn: (() => {
        const x = <{ toNumber: () => number }>this.totalLamportsIn
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      totalLamportsOut: (() => {
        const x = <{ toNumber: () => number }>this.totalLamportsOut
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      commonConfig: this.commonConfig,
      gameTypeConfig: this.gameTypeConfig.__kind,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const gameBeet = new beet.FixableBeetStruct<Game, GameArgs>(
  [
    ['accountType', stateAccountTypeBeet],
    ['host', beetSolana.publicKey],
    ['isActive', beet.bool],
    ['unresolvedVrfResult', beet.u32],
    ['totalLamportsIn', beet.u64],
    ['totalLamportsOut', beet.u64],
    ['commonConfig', commonGameConfigBeet],
    ['gameTypeConfig', gameTypeConfigBeet],
  ],
  Game.fromArgs,
  'Game'
)
