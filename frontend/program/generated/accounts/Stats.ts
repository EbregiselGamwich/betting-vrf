/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import {
  StateAccountType,
  stateAccountTypeBeet,
} from '../types/StateAccountType'

/**
 * Arguments used to create {@link Stats}
 * @category Accounts
 * @category generated
 */
export type StatsArgs = {
  accountType: StateAccountType
  totalGames: beet.bignum
  totalUsers: number
  totalBets: number
  totalWager: beet.bignum
  totalLamportsWonByBettors: beet.bignum
  totalLamportsDeposited: beet.bignum
  totalLamportsWithdrew: beet.bignum
}
/**
 * Holds the data for the {@link Stats} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Stats implements StatsArgs {
  private constructor(
    readonly accountType: StateAccountType,
    readonly totalGames: beet.bignum,
    readonly totalUsers: number,
    readonly totalBets: number,
    readonly totalWager: beet.bignum,
    readonly totalLamportsWonByBettors: beet.bignum,
    readonly totalLamportsDeposited: beet.bignum,
    readonly totalLamportsWithdrew: beet.bignum
  ) {}

  /**
   * Creates a {@link Stats} instance from the provided args.
   */
  static fromArgs(args: StatsArgs) {
    return new Stats(
      args.accountType,
      args.totalGames,
      args.totalUsers,
      args.totalBets,
      args.totalWager,
      args.totalLamportsWonByBettors,
      args.totalLamportsDeposited,
      args.totalLamportsWithdrew
    )
  }

  /**
   * Deserializes the {@link Stats} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [Stats, number] {
    return Stats.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Stats} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey
  ): Promise<Stats> {
    const accountInfo = await connection.getAccountInfo(address)
    if (accountInfo == null) {
      throw new Error(`Unable to find Stats account at ${address}`)
    }
    return Stats.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'HiEuiREGdSuBYv4oxtdkWnYtcnNUKk8m93XSn8pPYtcm'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, statsBeet)
  }

  /**
   * Deserializes the {@link Stats} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Stats, number] {
    return statsBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link Stats} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return statsBeet.serialize(this)
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Stats}
   */
  static get byteSize() {
    return statsBeet.byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Stats} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      Stats.byteSize,
      commitment
    )
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link Stats} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === Stats.byteSize
  }

  /**
   * Returns a readable version of {@link Stats} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      accountType: 'StateAccountType.' + StateAccountType[this.accountType],
      totalGames: (() => {
        const x = <{ toNumber: () => number }>this.totalGames
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      totalUsers: this.totalUsers,
      totalBets: this.totalBets,
      totalWager: (() => {
        const x = <{ toNumber: () => number }>this.totalWager
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      totalLamportsWonByBettors: (() => {
        const x = <{ toNumber: () => number }>this.totalLamportsWonByBettors
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      totalLamportsDeposited: (() => {
        const x = <{ toNumber: () => number }>this.totalLamportsDeposited
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      totalLamportsWithdrew: (() => {
        const x = <{ toNumber: () => number }>this.totalLamportsWithdrew
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const statsBeet = new beet.BeetStruct<Stats, StatsArgs>(
  [
    ['accountType', stateAccountTypeBeet],
    ['totalGames', beet.u64],
    ['totalUsers', beet.u32],
    ['totalBets', beet.u32],
    ['totalWager', beet.u64],
    ['totalLamportsWonByBettors', beet.u64],
    ['totalLamportsDeposited', beet.u64],
    ['totalLamportsWithdrew', beet.u64],
  ],
  Stats.fromArgs,
  'Stats'
)
